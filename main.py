import logging
import re
import os
import time # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –∑–∞–¥–∞—á
import random # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∑
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)


# üîë –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = '' # –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –¢–û–ö–ï–ù

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–ª–æ–≤–∞—Ä–∏ ---
# üßπ –°–ª–æ–≤–∞—Ä—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
tasks = {
    'dishes': 'üßº –ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É',
    'trash': 'üóëÔ∏è –í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä',
    'plants': 'üåø –ü–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è'
}

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
time_options = {
    '1m': 1,
    '5m': 5,
    '10m': 10
}

# üò¥ –°–ø–∏—Å–æ–∫ —à—É—Ç–æ–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏
procrastination_phrases = [
    "–û–∫–µ–π, –º—É—Å–æ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç –ø–æ–¥–æ–∂–¥–µ—Ç. –ù–∞–¥–µ—é—Å—å, –æ–Ω –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∫—É—Ö–Ω—é –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è!",
    "–ü–æ–Ω–∏–º–∞—é, –¥–∏–≤–∞–Ω —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –º—è–≥–æ–∫. –î–∞—é —Ç–µ–±–µ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–¥–≤–∏–≥–∏!",
    "–ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞. –ü–æ–º–Ω–∏, –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–µ –¥–µ–ª–∞—é—Ç—Å—è –Ω–∞ –≥–æ–ª–æ–¥–Ω—ã–π –∂–µ–ª—É–¥–æ–∫... –∏–ª–∏ –Ω–∞ –ø–æ–ª–Ω—ã–π... –≤ –æ–±—â–µ–º, –ø–æ—Ç–æ–º.",
    "–•–æ—Ä–æ—à–æ, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º. –ù–æ –µ—Å–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –∑–∞–≤—è–Ω—É—Ç, –º—ã —Å–∫–∞–∂–µ–º –∏–º, —á—Ç–æ —ç—Ç–æ –±—ã–ª —Ç–≤–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–ø—É—Å–∫.",
    "–ü—Ä–∏–Ω—è—Ç–æ! –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Ç–µ–ø–µ—Ä—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ '–°–¥–µ–ª–∞—é –∑–∞–≤—Ç—Ä–∞'. –°–ø–∏—Å–æ–∫ –¥–ª–∏–Ω–Ω—ã–π, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è.",
    "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –î–∞–∂–µ –†–∏–º –Ω–µ –æ–¥–∏–Ω –¥–µ–Ω—å —Å—Ç—Ä–æ–∏–ª—Å—è. –ü—Ä–∞–≤–¥–∞, –æ–Ω –∏ –Ω–µ –ø–æ—Å—É–¥—É –º—ã–ª.",
    "–û—Ç–¥—ã—Ö–∞–π, –≥–µ—Ä–æ–π! –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –ø–æ–¥–æ–∂–¥–µ—Ç —Ç–≤–æ–µ–≥–æ —Ç—Ä–∏—É–º—Ñ–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å –∫—É—Ö–Ω–∏ —Å —á–∞–µ–º.",
    "–ï—Å—Ç—å! –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è. –û–Ω–∞ –±—É–¥–µ—Ç —Ç–µ—Ä–ø–µ–ª–∏–≤–æ –∂–¥–∞—Ç—å, –ø–æ–∫–∞ —Ç—ã —Å–ø–∞—Å–∞–µ—à—å –º–∏—Ä –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.",
]

# ‚ú® –°–ø–∏—Å–æ–∫ –ø–æ—Ö–≤–∞–ª—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
completion_praises = [
    "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –ø—Ä–æ—Å—Ç–æ –º–æ–ª–æ–¥–µ—Ü!",
    "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –í—Ä–µ–º—è –¥–ª—è –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞.",
    "–°—É–ø–µ—Ä! –ï—â–µ –æ–¥–Ω–æ –¥–µ–ª–æ —Å–¥–µ–ª–∞–Ω–æ. –¢—ã unstoppable!",
    "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –î–æ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∏—â–µ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ.",
    "–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! –ì–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π.",
    "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ, –ø–æ–∫–æ—Ä–µ–Ω–∏–µ –º–∏—Ä–∞?",
    "–ï—Å—Ç—å! –ú–∏–Ω—É—Å –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞. –¢—ã ‚Äî —á–µ–º–ø–∏–æ–Ω –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!",
]


# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –¥–∞–Ω–Ω—ã–º–∏ ---
user_states = {}
user_task_data = {}
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
AWAITING_CUSTOM_TASK = 1
AWAITING_CUSTOM_TIME = 2

# üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ì–õ–ê–í–ù–£–Æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞."""
    keyboard = [
        ['–ù–∞–ø–æ–º–Ω–∏—Ç—å ‚è∞', '–£–¥–∞–ª–∏—Ç—å ‚ùå']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_time_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    keyboard = [
        [
            InlineKeyboardButton("1 –º–∏–Ω", callback_data='time_1m'),
            InlineKeyboardButton("5 –º–∏–Ω", callback_data='time_5m'),
            InlineKeyboardButton("10 –º–∏–Ω", callback_data='time_10m')
        ],
        [InlineKeyboardButton("‚è±Ô∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)", callback_data='custom_time_start')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def schedule_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE, minutes: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    task_info = user_task_data.get(user_id)
    if not task_info:
        await context.bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
        return

    task_text = tasks.get(task_info, task_info)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏.
    job_name = f"reminder_{chat_id}_{user_id}_{int(time.time())}"

    context.job_queue.run_once(
        reminder_callback,
        when=minutes * 60,
        chat_id=chat_id,
        data=task_text,
        name=job_name
    )
    logger.info(f"Scheduled a reminder with name {job_name} for chat_id {chat_id} in {minutes} minutes.")

    confirmation_text = f"–û–∫–µ–π! –ù–∞–ø–æ–º–Ω—é –æ –∑–∞–¥–∞—á–µ ¬´{task_text}¬ª —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –≤—ã–∑–æ–≤ - –æ—Ç –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.callback_query:
        await update.callback_query.edit_message_text(confirmation_text)
    else:
        await context.bot.send_message(chat_id, confirmation_text, reply_markup=get_main_keyboard())

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_task_data: del user_task_data[user_id]
    if user_id in user_states: del user_states[user_id]

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–µ–Ω–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–º—É.\n"
        "–ù–∞–∂–º–∏ '–ù–∞–ø–æ–º–Ω–∏—Ç—å ‚è∞', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å, –æ —á—ë–º —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –∏–ª–∏ '–£–¥–∞–ª–∏—Ç—å ‚ùå' –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n"
        "–ö–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "‚òï *–û—Ç–ª–æ–∂–∏—Ç—å* ‚Äî –±–æ—Ç –ø–æ—à—É—Ç–∏—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É.\n"
        "‚òëÔ∏è *–ó–∞–≤–µ—Ä—à–∏—Ç—å* ‚Äî –±–æ—Ç –ø–æ—Ö–≤–∞–ª–∏—Ç —Ç–µ–±—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–ª–æ.",
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )

async def remind_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏, –≤–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–∞—Å—Ç–æ–º–Ω—ã–µ."""
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ—Å—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recent_tasks = context.user_data.get('recent_custom_tasks', [])
    
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–¥–∞—á
    if recent_tasks:
        for i, task_text in enumerate(recent_tasks):
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            button_text = f"üîÑ {task_text}"
            if len(button_text) > 40:
                 button_text = button_text[:37] + "..."
            # callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"select_recent_{i}")])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton("üßº –ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É", callback_data='task_dishes')],
        [InlineKeyboardButton("üóëÔ∏è –í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä", callback_data='task_trash')],
        [InlineKeyboardButton("üåø –ü–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data='task_plants')],
        [InlineKeyboardButton("üìù –°–≤–æ—è –∑–∞–¥–∞—á–∞", callback_data='custom_task_start')]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É, —Å–æ–∑–¥–∞–π —Å–≤–æ—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ–¥–∞–≤–Ω—é—é:", reply_markup=reply_markup)


async def delete_list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ '–£–¥–∞–ª–∏—Ç—å ‚ùå'."""
    chat_id = update.effective_chat.id
    active_jobs = [job for job in context.job_queue.jobs() if job.chat_id == chat_id]

    if not active_jobs:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.", reply_markup=get_main_keyboard())
        return

    keyboard = []
    for job in active_jobs:
        button_text = f"‚ùå {job.data} (–≤ {job.next_run_time.strftime('%H:%M:%S')})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"delete_confirm_{job.name}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ö–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å?", reply_markup=reply_markup)

async def reminder_callback(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ '–û—Ç–ª–æ–∂–∏—Ç—å' –∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'."""
    job = context.job
    keyboard = [[
        InlineKeyboardButton("‚òï –û—Ç–ª–æ–∂–∏—Ç—å", callback_data="postpone"),
        InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚òëÔ∏è", callback_data="complete")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=job.chat_id, 
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.data}!",
        reply_markup=reply_markup
    )
    logger.info(f"Sent reminder to chat_id {job.chat_id}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    # –ù–û–í–´–ô –ë–õ–û–ö: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
    if data.startswith('select_recent_'):
        try:
            index = int(data.split('_')[-1])
            recent_tasks = context.user_data.get('recent_custom_tasks', [])
            task_text = recent_tasks[index]
            
            user_task_data[user_id] = task_text
            await query.edit_message_text("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?", reply_markup=get_time_keyboard())
        except (IndexError, KeyError):
            await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç—É –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=None)

    elif data.startswith('task_'):
        task_key = data.split('_')[1]
        user_task_data[user_id] = task_key
        await query.edit_message_text("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?", reply_markup=get_time_keyboard())

    elif data == 'custom_task_start':
        user_states[user_id] = AWAITING_CUSTOM_TASK
        await query.edit_message_text(
            "–•–æ—Ä–æ—à–æ. –û –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ –º–Ω–µ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–µ –º–Ω–µ.",
            reply_markup=None 
        )

    elif data.startswith('time_'):
        minutes_key = data.split('_')[1]
        minutes = time_options.get(minutes_key)
        await schedule_reminder(update, context, minutes)

    elif data == 'custom_time_start':
        user_states[user_id] = AWAITING_CUSTOM_TIME
        await query.edit_message_text(
            "–ü–æ–Ω—è–ª. –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –∏–ª–∏ 60).",
            reply_markup=None
        )

    elif data == 'postpone':
        original_message_text = query.message.text
        task_text = original_message_text.replace("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ", "").replace("!", "")
        user_task_data[user_id] = task_text
        joke = random.choice(procrastination_phrases)
        await query.edit_message_text(f"{original_message_text}\n\n_{joke}_", parse_mode='Markdown')
        await context.bot.send_message(
            chat_id=query.effective_chat.id,
            text="–•–æ—Ä–æ—à–æ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –æ—Ç–ª–æ–∂–∏–º?",
            reply_markup=get_time_keyboard()
        )

    elif data == 'complete':
        original_message_text = query.message.text
        praise = random.choice(completion_praises)
        await query.edit_message_text(f"{original_message_text}\n\n‚úÖ *{praise}*", parse_mode='Markdown')

    elif data.startswith('delete_confirm_'):
        job_name = data.replace('delete_confirm_', '', 1)
        jobs_to_remove = context.job_queue.get_jobs_by_name(job_name)
        
        if not jobs_to_remove:
            await query.edit_message_text("–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            return
        
        for job in jobs_to_remove:
            job.schedule_removal()
        
        logger.info(f"Removed job with name {job_name}")
        await query.edit_message_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –≤—Ä–µ–º–µ–Ω–∏."""
    user_id = update.message.from_user.id
    current_state = user_states.get(user_id)

    if current_state == AWAITING_CUSTOM_TASK:
        custom_task_text = update.message.text
        user_task_data[user_id] = custom_task_text
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∑–∞–¥–∞—á—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        if 'recent_custom_tasks' not in context.user_data:
            context.user_data['recent_custom_tasks'] = []
        
        recent_tasks = context.user_data['recent_custom_tasks']
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –≤ –Ω–∞—á–∞–ª–æ
        if custom_task_text in recent_tasks:
            recent_tasks.remove(custom_task_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        recent_tasks.insert(0, custom_task_text)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–¥–∞—á–∏
        context.user_data['recent_custom_tasks'] = recent_tasks[:3]
        
        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"–ü—Ä–∏–Ω—è—Ç–æ! –ó–∞–¥–∞—á–∞: ¬´{custom_task_text}¬ª.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:", 
            reply_markup=get_time_keyboard()
        )

    elif current_state == AWAITING_CUSTOM_TIME:
        try:
            minutes = int(update.message.text)
            if minutes <= 0:
                await update.message.reply_text("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
                return
            await schedule_reminder(update, context, minutes)
        except ValueError:
            await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15).")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    app = ApplicationBuilder().token(TOKEN).build()

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'(?i)^—Å—Ç–∞—Ä—Ç$'), start))

    app.add_handler(CommandHandler("remind", remind_handler))
    remind_regex = r'(?i)^(–ù–∞–ø–æ–º–Ω–∏—Ç—å ‚è∞|–Ω–∞–ø–æ–º–Ω–∏)$'
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(remind_regex), remind_handler))
    
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–£–¥–∞–ª–∏—Ç—å ‚ùå$'), delete_list_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.run_polling()

if __name__ == '__main__':
    main()
